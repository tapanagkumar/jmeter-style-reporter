{"version":3,"sources":["../src/jmeter-reporter.ts"],"names":["JMeterPerformanceCollector","options","err","cleanup","metric","fullMetric","sanitizeString","parseFloatSafe","parseIntSafe","error","metricString","createHash","metricsToFlush","fsPromises","dir","fileExists","csvContent","header","csvLines","escapeJavaScript","count","StatisticsCalculator","values","percentile","sorted","a","b","index","responseTimes","threshold","label","satisfied","rt","tolerating","frustrated","score","mean","avgSquaredDiff","value","sum","parseCSVLineEnhanced","line","lineNumber","result","parts","current","inQuotes","i","char","nextChar","sanitizeCSVField","timestamp","elapsed","responseCode","now","oneYearAgo","oneHourFuture","parseCSVLine","parsed","validateOutputPath","outputPath","resolved","cwd","escapeHtml","unsafe","safeJsonStringify","data","key","getErrorMessage","code","migrateLegacyOptions","legacy","createCollector","enhancedOptions","generateJMeterReport","processingStartTime","csvFiles","outputDir","config","warnings","recordsProcessed","recordsSkipped","createReadStream","createInterface","maxRecordsInMemory","allRecords","parseErrors","parseWarnings","csvFile","fileStats","fileStream","rl","fileRecordCount","record","parseResult","message","startTime","r","endTime","testDuration","endpointData","endpointStats","apdexData","records","errors","totalBytes","average","stats","apdex","timeInterval","timeSeriesData","t","windowRecords","avgResponseTime","activeThreads","errorCounts","errorSummary","totalRequests","errorCount","allResponseTimes","averageResponseTime","errorRate","throughput","summary","overallApdex","htmlContent","generateEnhancedHTMLReport","reportPath","processingEndTime","memoryUsage","getEmbeddedChartingLibrary","isDark","bgColor","cardBg","textColor","borderColor","headerBg","endpointDataForJs","useEmbeddedCharts","getApdexClass","stat","performanceMiddleware","collectorOrOptions","collector","middlewareOptions","req","res","next","pattern","startCpuUsage","originalEnd","args","responseTime","cpuUsage","endpoint","customFields","jmeter_reporter_default"],"mappings":"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","file":"index.mjs","sourcesContent":["/**\n * Enhanced JMeter Style Reporter\n * Provides comprehensive performance testing and reporting with JMeter compatibility\n */\n\nimport * as fs from 'fs'\nimport * as path from 'path'\nimport { createHash } from 'crypto'\n\nexport interface PerformanceMetric {\n  endpoint?: string\n  responseTime?: number\n  statusCode?: number\n  method?: string\n  timestamp?: number\n  success?: boolean\n  testName?: string\n  bytes?: number\n  sentBytes?: number\n  grpThreads?: number\n  allThreads?: number\n  customFields?: Record<string, any>\n}\n\nexport interface CollectorOptions {\n  outputPath: string\n  testName?: string\n  bufferSize?: number\n  flushInterval?: number\n  silent?: boolean\n  onFlush?: (count: number) => void\n  onError?: (error: Error) => void\n  jmeterCompatible?: boolean\n}\n\nexport interface ReportOptions {\n  csv: string | string[]\n  output?: string\n  title?: string\n  theme?: 'light' | 'dark' | 'auto'\n  includePercentiles?: boolean\n  includeApdex?: boolean\n  apdexThreshold?: number\n  includeDrillDown?: boolean\n  apiVersion?: '1.0' | '1.1' | 'latest'\n  maxMemoryUsageMB?: number\n  streamingMode?: boolean\n  maxDataPoints?: number\n  skipDataValidation?: boolean\n  jenkinsCompatible?: boolean\n  embeddedCharts?: boolean\n}\n\nexport interface ReportResult {\n  outputPath: string\n  reportUrl: string\n  summary: {\n    totalRequests: number\n    averageResponseTime?: number\n    errorRate: number\n    throughput: number\n    percentiles?: {\n      p50: number\n      p90: number\n      p95: number\n      p99: number\n    }\n    apdexScore?: number\n  }\n  warnings: string[]\n  stats: {\n    memoryUsedMB: number\n    processingTimeMs: number\n    recordsProcessed: number\n    recordsSkipped: number\n  }\n}\n\n// JMeter CSV format record\ninterface JMeterRecord {\n  timestamp: number\n  elapsed: number\n  label: string\n  responseCode: number\n  success: boolean\n  bytes: number\n  sentBytes: number\n  grpThreads: number\n  allThreads: number\n  filename: string\n}\n\ninterface EndpointStats {\n  label: string\n  samples: number\n  average: number\n  median: number\n  p90: number\n  p95: number\n  p99: number\n  min: number\n  max: number\n  errorRate: number\n  throughput: number\n  receivedKB: number\n  avgBytes: number\n  apdexScore?: number\n}\n\ninterface TimeSeriesPoint {\n  timestamp: number\n  responseTime: number\n  throughput: number\n  errorRate: number\n  activeThreads?: number\n}\n\ninterface ErrorInfo {\n  responseCode: number\n  count: number\n  percentage: number\n  message: string\n}\n\ninterface ApdexData {\n  label: string\n  score: number\n  samples: number\n  satisfied: number\n  tolerating: number\n  frustrated: number\n}\n\n/**\n * Enhanced Performance Collector with JMeter compatibility\n */\nexport class JMeterPerformanceCollector {\n  private metrics: PerformanceMetric[] = []\n  private options: CollectorOptions\n  private flushTimer?: NodeJS.Timeout\n  private disposed: boolean = false\n  private readonly maxMetrics: number = 100000 // Prevent memory exhaustion\n  private flushing: boolean = false\n  private pendingFlush: Promise<void> | null = null\n  private totalMetricsCollected: number = 0\n  private totalMetricsFlushed: number = 0\n  private errorCount: number = 0\n  private flushCount: number = 0\n  private readonly startTime: number = Date.now()\n  private dataIntegrityHash: string = ''\n\n  constructor(options: CollectorOptions) {\n    this.options = {\n      bufferSize: 1000,\n      flushInterval: 5000,\n      silent: false,\n      jmeterCompatible: true,\n      ...options\n    }\n\n    // Validate buffer size to prevent memory issues\n    if (this.options.bufferSize && this.options.bufferSize > 10000) {\n      console.warn('Buffer size clamped to 10000 to prevent memory issues')\n      this.options.bufferSize = 10000\n    }\n\n    if (this.options.flushInterval && this.options.flushInterval > 0) {\n      this.flushTimer = setInterval(() => {\n        if (!this.disposed) {\n          this.flush().catch(err => {\n            console.error('Flush error:', err)\n            this.options.onError?.(err)\n          })\n        }\n      }, this.options.flushInterval)\n      \n      // Ensure timer doesn't keep process alive unnecessarily\n      this.flushTimer.unref?.()\n    }\n\n    // Add cleanup on process exit\n    const cleanup = () => {\n      if (!this.disposed) {\n        this.dispose().catch(console.error)\n      }\n    }\n    \n    process.on('exit', cleanup)\n    process.on('SIGINT', cleanup)\n    process.on('SIGTERM', cleanup)\n    process.on('uncaughtException', cleanup)\n  }\n\n  async recordMetric(metric: Partial<PerformanceMetric>): Promise<void> {\n    if (this.disposed) {\n      console.warn('Cannot record metric: collector has been disposed')\n      return\n    }\n\n    try {\n      // Enhanced validation\n      if (metric.responseTime !== undefined && (typeof metric.responseTime !== 'number' || metric.responseTime < 0)) {\n        throw new Error(`Invalid response time: ${metric.responseTime}`)\n      }\n\n      if (metric.statusCode !== undefined && (typeof metric.statusCode !== 'number' || metric.statusCode < 100 || metric.statusCode > 599)) {\n        throw new Error(`Invalid status code: ${metric.statusCode}`)\n      }\n\n      // Prevent memory exhaustion\n      if (this.metrics.length >= this.maxMetrics) {\n        console.warn(`Maximum metrics limit reached (${this.maxMetrics}), forcing flush`)\n        await this.flush()\n      }\n\n      const fullMetric: PerformanceMetric = {\n        timestamp: Date.now(),\n        endpoint: sanitizeString(metric.endpoint || 'unknown'),\n        responseTime: parseFloatSafe(String(metric.responseTime || 0)),\n        statusCode: parseIntSafe(String(metric.statusCode || 200)),\n        method: sanitizeString(metric.method || 'GET'),\n        success: (metric.statusCode || 200) < 400,\n        testName: sanitizeString(metric.testName || this.options.testName || 'default'),\n        bytes: parseIntSafe(String(metric.bytes || 0)),\n        sentBytes: parseIntSafe(String(metric.sentBytes || 0)),\n        grpThreads: Math.max(1, parseIntSafe(String(metric.grpThreads || 1))),\n        allThreads: Math.max(1, parseIntSafe(String(metric.allThreads || 1))),\n        ...metric\n      }\n\n      // Data integrity check\n      this.updateDataIntegrityHash(fullMetric)\n      \n      this.metrics.push(fullMetric)\n      this.totalMetricsCollected++\n\n      if (this.metrics.length >= (this.options.bufferSize || 1000)) {\n        await this.flush()\n      }\n    } catch (error) {\n      this.errorCount++\n      this.options.onError?.(error as Error)\n      console.error('Failed to record metric:', error)\n    }\n  }\n\n  private updateDataIntegrityHash(metric: PerformanceMetric): void {\n    const metricString = `${metric.timestamp}:${metric.responseTime}:${metric.statusCode}`\n    this.dataIntegrityHash = createHash('sha256').update(this.dataIntegrityHash + metricString).digest('hex').substring(0, 16)\n  }\n\n  getStats(): {\n    totalMetrics: number\n    bufferedMetrics: number\n    flushCount: number\n    errorCount: number\n    isActive: boolean\n    startTime: number\n    lastFlushTime: number\n    dataIntegrityHash: string\n  } {\n    return {\n      totalMetrics: this.totalMetricsCollected,\n      bufferedMetrics: this.metrics.length,\n      flushCount: this.flushCount,\n      errorCount: this.errorCount,\n      isActive: !this.disposed,\n      startTime: this.startTime,\n      lastFlushTime: Date.now(),\n      dataIntegrityHash: this.dataIntegrityHash\n    }\n  }\n\n  async flush(): Promise<void> {\n    // Return existing flush promise if already flushing\n    if (this.pendingFlush) {\n      return this.pendingFlush\n    }\n\n    // No metrics to flush\n    if (this.metrics.length === 0) {\n      return\n    }\n\n    // Set up concurrency control\n    this.pendingFlush = this._performFlush()\n    \n    try {\n      await this.pendingFlush\n    } finally {\n      this.pendingFlush = null\n    }\n  }\n\n  private async _performFlush(): Promise<void> {\n    if (this.flushing || this.metrics.length === 0) {\n      return\n    }\n\n    this.flushing = true\n    \n    try {\n      // Take a snapshot of current metrics and clear the array atomically\n      const metricsToFlush = [...this.metrics]\n      this.metrics.length = 0\n\n      if (metricsToFlush.length === 0) {\n        return\n      }\n\n      // Use async file operations\n      const { promises: fsPromises } = await import('fs')\n      const path = await import('path')\n      \n      // Ensure directory exists\n      const dir = path.dirname(this.options.outputPath)\n      try {\n        await fsPromises.mkdir(dir, { recursive: true })\n      } catch (error: any) {\n        if (error.code !== 'EEXIST') {\n          throw error\n        }\n      }\n\n      // Check if file exists\n      let fileExists = false\n      try {\n        await fsPromises.access(this.options.outputPath)\n        fileExists = true\n      } catch {\n        // File doesn't exist, we'll create it\n      }\n\n      // Create CSV header if file doesn't exist\n      let csvContent = ''\n      if (!fileExists) {\n        const header = this.options.jmeterCompatible\n          ? 'timestamp,elapsed,label,responseCode,success,bytes,sentBytes,grpThreads,allThreads,Filename\\n'\n          : 'timestamp,responseTime,endpoint,statusCode,success,method,testName\\n'\n        csvContent += header\n      }\n\n      // Generate CSV lines with proper escaping\n      const csvLines = metricsToFlush.map(metric => {\n        if (this.options.jmeterCompatible) {\n          return [\n            metric.timestamp,\n            metric.responseTime,\n            `\"${escapeJavaScript(metric.endpoint || '')}\"`,\n            metric.statusCode,\n            metric.success,\n            metric.bytes || 0,\n            metric.sentBytes || 0,\n            metric.grpThreads || 1,\n            metric.allThreads || 1,\n            `\"${escapeJavaScript(metric.testName || '')}\"`\n          ].join(',')\n        } else {\n          return [\n            metric.timestamp,\n            metric.responseTime,\n            `\"${escapeJavaScript(metric.endpoint || '')}\"`,\n            metric.statusCode,\n            metric.success,\n            escapeJavaScript(metric.method || ''),\n            `\"${escapeJavaScript(metric.testName || '')}\"`\n          ].join(',')\n        }\n      }).join('\\n') + '\\n'\n\n      csvContent += csvLines\n\n      // Write to file atomically\n      await fsPromises.appendFile(this.options.outputPath, csvContent, 'utf8')\n      \n      const count = metricsToFlush.length\n      this.totalMetricsFlushed += count\n      this.flushCount++\n      \n      if (!this.options.silent) {\n        console.log(`✅ Flushed ${count} metrics to ${this.options.outputPath} (Total: ${this.totalMetricsFlushed})`)\n      }\n      \n      this.options.onFlush?.(count)\n    } catch (error) {\n      console.error('Flush failed:', error)\n      this.options.onError?.(error as Error)\n      throw error\n    } finally {\n      this.flushing = false\n    }\n  }\n\n  async dispose(): Promise<void> {\n    if (this.disposed) {\n      return\n    }\n\n    this.disposed = true\n\n    if (this.flushTimer) {\n      clearInterval(this.flushTimer)\n      this.flushTimer = undefined\n    }\n\n    // Remove event listeners to prevent memory leaks\n    try {\n      process.removeAllListeners('exit')\n      process.removeAllListeners('SIGINT')\n      process.removeAllListeners('SIGTERM') \n      process.removeAllListeners('uncaughtException')\n    } catch (error) {\n      // Ignore errors if process cleanup fails\n    }\n\n    await this.flush()\n    \n    // Clear metrics array to free memory\n    this.metrics.length = 0\n  }\n}\n\n/**\n * Statistical calculation utilities\n */\nexport class StatisticsCalculator {\n  static calculatePercentile(values: number[], percentile: number): number {\n    if (values.length === 0) return 0\n    const sorted = [...values].sort((a, b) => a - b)\n    const index = Math.ceil((percentile / 100) * sorted.length) - 1\n    return sorted[Math.max(0, index)]\n  }\n\n  static calculateApdexScore(\n    responseTimes: number[], \n    threshold: number = 500,\n    label?: string\n  ): ApdexData {\n    if (responseTimes.length === 0) {\n      return {\n        label: label || 'Unknown',\n        score: 0,\n        samples: 0,\n        satisfied: 0,\n        tolerating: 0,\n        frustrated: 0\n      }\n    }\n\n    const satisfied = responseTimes.filter(rt => rt <= threshold).length\n    const tolerating = responseTimes.filter(rt => rt > threshold && rt <= threshold * 4).length\n    const frustrated = responseTimes.filter(rt => rt > threshold * 4).length\n    const score = (satisfied + (tolerating * 0.5)) / responseTimes.length\n\n    return {\n      label: label || 'Unknown',\n      score,\n      samples: responseTimes.length,\n      satisfied,\n      tolerating,\n      frustrated\n    }\n  }\n\n  static calculateStandardDeviation(values: number[], mean: number): number {\n    if (values.length === 0) return 0\n    const squaredDiffs = values.map(value => Math.pow(value - mean, 2))\n    const avgSquaredDiff = squaredDiffs.reduce((sum, value) => sum + value, 0) / values.length\n    return Math.sqrt(avgSquaredDiff)\n  }\n}\n\n/**\n * Enhanced CSV parsing with better validation and error tracking\n */\ninterface ParseResult {\n  record: JMeterRecord | null\n  errors: string[]\n  warnings: string[]\n}\n\nfunction parseCSVLineEnhanced(line: string, lineNumber: number): ParseResult {\n  const result: ParseResult = {\n    record: null,\n    errors: [],\n    warnings: []\n  }\n\n  if (!line || line.trim().length === 0) {\n    return result\n  }\n\n  // Check for potential CSV injection\n  if (/^[@=+\\-|]/.test(line.trim())) {\n    result.warnings.push(`Line ${lineNumber}: Potential CSV injection detected`)\n  }\n\n  try {\n    const parts: string[] = []\n    let current = ''\n    let inQuotes = false\n    let i = 0\n\n    while (i < line.length) {\n      const char = line[i]\n      const nextChar = line[i + 1]\n\n      if (char === '\"') {\n        if (inQuotes && nextChar === '\"') {\n          // Escaped quote within quoted field\n          current += '\"'\n          i += 2\n          continue\n        } else {\n          // Toggle quote state\n          inQuotes = !inQuotes\n        }\n      } else if (char === ',' && !inQuotes) {\n        // Field separator\n        parts.push(sanitizeCSVField(current.trim()))\n        current = ''\n        i++\n        continue\n      } else {\n        current += char\n      }\n      i++\n    }\n\n    // Add the last field\n    parts.push(sanitizeCSVField(current.trim()))\n\n    // Validate minimum field count\n    if (parts.length < 10) {\n      result.errors.push(`Line ${lineNumber}: Insufficient fields: ${parts.length} < 10`)\n      return result\n    }\n\n    // Parse with enhanced validation\n    const timestamp = parseIntSafe(parts[0])\n    const elapsed = parseFloatSafe(parts[1])\n    const responseCode = parseIntSafe(parts[3])\n\n    // Validate required numeric fields\n    if (isNaN(timestamp) || timestamp <= 0) {\n      result.errors.push(`Line ${lineNumber}: Invalid timestamp: ${parts[0]}`)\n      return result\n    }\n\n    if (isNaN(elapsed) || elapsed < 0) {\n      result.errors.push(`Line ${lineNumber}: Invalid elapsed time: ${parts[1]}`)\n      return result\n    }\n\n    if (isNaN(responseCode) || responseCode < 100 || responseCode > 599) {\n      result.errors.push(`Line ${lineNumber}: Invalid response code: ${parts[3]}`)\n      return result\n    }\n\n    // Validate timestamp is reasonable (not too old or in future)\n    const now = Date.now()\n    const oneYearAgo = now - (365 * 24 * 60 * 60 * 1000)\n    const oneHourFuture = now + (60 * 60 * 1000)\n    \n    if (timestamp < oneYearAgo || timestamp > oneHourFuture) {\n      result.warnings.push(`Line ${lineNumber}: Suspicious timestamp: ${new Date(timestamp).toISOString()}`)\n    }\n\n    // Validate response time is reasonable\n    if (elapsed > 300000) { // 5 minutes\n      result.warnings.push(`Line ${lineNumber}: Very high response time: ${elapsed}ms`)\n    }\n\n    result.record = {\n      timestamp,\n      elapsed,\n      label: sanitizeString(parts[2]),\n      responseCode,\n      success: parts[4]?.toLowerCase().trim() === 'true',\n      bytes: Math.max(0, parseIntSafe(parts[5]) || 0),\n      sentBytes: Math.max(0, parseIntSafe(parts[6]) || 0),\n      grpThreads: Math.max(1, parseIntSafe(parts[7]) || 1),\n      allThreads: Math.max(1, parseIntSafe(parts[8]) || 1),\n      filename: sanitizeString(parts[9] || '')\n    }\n\n    return result\n  } catch (error) {\n    result.errors.push(`Line ${lineNumber}: Parse error: ${error}`)\n    return result\n  }\n}\n\n/**\n * Legacy function for backward compatibility\n */\nfunction parseCSVLine(line: string): JMeterRecord | null {\n  const result = parseCSVLineEnhanced(line, 0)\n  if (result.errors.length > 0) {\n    console.error('CSV parse errors:', result.errors)\n  }\n  if (result.warnings.length > 0) {\n    console.warn('CSV parse warnings:', result.warnings)\n  }\n  return result.record\n}\n\n/**\n * Safely parse integer with bounds checking\n */\nfunction parseIntSafe(value: string | undefined): number {\n  if (!value || value.trim().length === 0) {\n    return 0\n  }\n  \n  const parsed = parseInt(value.trim(), 10)\n  \n  // Check for valid number and reasonable bounds\n  if (isNaN(parsed) || !isFinite(parsed)) {\n    return 0\n  }\n  \n  // Clamp to reasonable bounds to prevent memory issues\n  return Math.max(0, Math.min(parsed, Number.MAX_SAFE_INTEGER))\n}\n\n/**\n * Safely parse float with bounds checking\n */\nfunction parseFloatSafe(value: string | undefined): number {\n  if (!value || value.trim().length === 0) {\n    return 0\n  }\n  \n  const parsed = parseFloat(value.trim())\n  \n  if (isNaN(parsed) || !isFinite(parsed)) {\n    return 0\n  }\n  \n  // Clamp to reasonable bounds\n  return Math.max(0, Math.min(parsed, Number.MAX_SAFE_INTEGER))\n}\n\n/**\n * Enhanced security validation for file paths\n */\nfunction validateOutputPath(outputPath: string): string {\n  if (!outputPath || typeof outputPath !== 'string') {\n    throw new Error('Invalid output path')\n  }\n  \n  // Prevent path traversal attacks\n  const resolved = path.resolve(outputPath)\n  const cwd = process.cwd()\n  \n  if (!resolved.startsWith(cwd)) {\n    throw new Error('Output path must be within current working directory')\n  }\n  \n  // Prevent writing to system directories\n  const forbidden = ['/etc', '/usr', '/var', '/bin', '/sbin', '/boot', '/sys']\n  if (forbidden.some(dir => resolved.startsWith(dir))) {\n    throw new Error('Cannot write to system directories')\n  }\n  \n  return resolved\n}\n\n/**\n * Enhanced CSV injection prevention\n */\nfunction sanitizeCSVField(value: string): string {\n  if (!value) return ''\n  \n  // Remove formula injection patterns\n  const dangerous = /^[@=+\\-|]/\n  if (dangerous.test(value.toString().trim())) {\n    return `'${value}` // Prefix with quote to prevent formula execution\n  }\n  \n  return value.toString()\n    .replace(/[\\r\\n]/g, ' ') // Remove line breaks\n    .substring(0, 1000) // Limit length\n}\n\n/**\n * Sanitize string fields to prevent XSS and data corruption\n */\nfunction sanitizeString(value: string): string {\n  if (!value) {\n    return ''\n  }\n  \n  return value\n    .trim()\n    .replace(/^\"|\"$/g, '') // Remove surrounding quotes\n    .replace(/\"/g, '&quot;') // Escape remaining quotes\n    .replace(/</g, '&lt;') // Escape HTML\n    .replace(/>/g, '&gt;')\n    .replace(/&/g, '&amp;') // Escape ampersands last\n    .substring(0, 1000) // Limit length to prevent memory issues\n}\n\n/**\n * Escape HTML content to prevent XSS attacks\n */\nfunction escapeHtml(unsafe: string | number | undefined): string {\n  if (unsafe === undefined || unsafe === null) {\n    return ''\n  }\n  \n  return String(unsafe)\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#039;')\n    .replace(/\\//g, '&#x2F;')\n}\n\n/**\n * Escape JavaScript string literals to prevent injection\n */\nfunction escapeJavaScript(unsafe: string): string {\n  if (!unsafe) {\n    return ''\n  }\n  \n  return unsafe\n    .replace(/\\\\/g, '\\\\\\\\')\n    .replace(/'/g, \"\\\\'\")\n    .replace(/\"/g, '\\\\\"')\n    .replace(/\\n/g, '\\\\n')\n    .replace(/\\r/g, '\\\\r')\n    .replace(/\\t/g, '\\\\t')\n    .replace(/\\f/g, '\\\\f')\n    .replace(/\\v/g, '\\\\v')\n    .replace(/\\0/g, '\\\\0')\n    .replace(/</g, '\\\\u003c')\n    .replace(/>/g, '\\\\u003e')\n}\n\n/**\n * Safely serialize data for JavaScript embedding\n */\nfunction safeJsonStringify(data: any): string {\n  try {\n    return JSON.stringify(data, (key, value) => {\n      if (typeof value === 'string') {\n        return escapeJavaScript(value)\n      }\n      return value\n    })\n  } catch (error) {\n    console.error('Failed to serialize data safely:', error)\n    return '{}'\n  }\n}\n\n/**\n * Get HTTP error message\n */\nfunction getErrorMessage(code: number): string {\n  const errorMessages: Record<number, string> = {\n    400: 'Bad Request',\n    401: 'Unauthorized',\n    403: 'Forbidden',\n    404: 'Not Found',\n    405: 'Method Not Allowed',\n    408: 'Request Timeout',\n    429: 'Too Many Requests',\n    500: 'Internal Server Error',\n    502: 'Bad Gateway',\n    503: 'Service Unavailable',\n    504: 'Gateway Timeout'\n  }\n  return errorMessages[code] || `HTTP ${code}`\n}\n\n/**\n * Legacy API support for v1.0 compatibility\n */\ninterface LegacyCollectorOptions {\n  outputPath: string\n  testName?: string\n  bufferSize?: number\n  flushInterval?: number\n  silent?: boolean\n  onFlush?: (count: number) => void\n  onError?: (error: Error) => void\n}\n\nfunction migrateLegacyOptions(legacy: LegacyCollectorOptions): CollectorOptions {\n  return {\n    ...legacy,\n    jmeterCompatible: true // Ensure backward compatibility\n  }\n}\n\n/**\n * Create performance collector with enhanced features\n */\nexport function createCollector(options: CollectorOptions | LegacyCollectorOptions): JMeterPerformanceCollector {\n  // Detect if using legacy options format\n  const hasLegacyOnlyFields = 'jmeterCompatible' in options\n  const enhancedOptions = hasLegacyOnlyFields ? options as CollectorOptions : migrateLegacyOptions(options as LegacyCollectorOptions)\n  \n  return new JMeterPerformanceCollector(enhancedOptions)\n}\n\n/**\n * Legacy function name for v1.0 compatibility\n */\nexport const generateReport = generateJMeterReport\n\n/**\n * Enhanced memory-safe streaming report generation\n */\nexport async function generateJMeterReport(options: ReportOptions): Promise<ReportResult> {\n  const processingStartTime = performance.now()\n  const csvFiles = Array.isArray(options.csv) ? options.csv : [options.csv]\n  const outputDir = validateOutputPath(options.output || './jmeter-report')\n  \n  // Configuration with backward compatibility\n  const config = {\n    apiVersion: options.apiVersion || 'latest',\n    maxMemoryUsageMB: options.maxMemoryUsageMB || 512,\n    streamingMode: options.streamingMode !== false,\n    maxDataPoints: options.maxDataPoints || 10000,\n    skipValidation: options.skipDataValidation === true\n  }\n  \n  const warnings: string[] = []\n  let recordsProcessed = 0\n  let recordsSkipped = 0\n  \n  // Use async operations\n  const { promises: fsPromises } = await import('fs')\n  const { createReadStream } = await import('fs')\n  const { createInterface } = await import('readline')\n  \n  // Ensure output directory exists\n  try {\n    await fsPromises.mkdir(outputDir, { recursive: true })\n  } catch (error: any) {\n    if (error.code !== 'EEXIST') {\n      throw error\n    }\n  }\n\n  // Memory-efficient data processing\n  const maxRecordsInMemory = Math.min(\n    Math.floor((config.maxMemoryUsageMB * 1024 * 1024) / 256), // Assume ~256 bytes per record\n    50000 // Hard limit for safety\n  )\n  \n  const allRecords: JMeterRecord[] = []\n  const parseErrors: string[] = []\n  const parseWarnings: string[] = []\n  \n  for (const csvFile of csvFiles) {\n    try {\n      await fsPromises.access(csvFile)\n      \n      const fileStats = await fsPromises.stat(csvFile)\n      if (fileStats.size > 500 * 1024 * 1024) { // 500MB\n        warnings.push(`Large file detected: ${csvFile} (${Math.round(fileStats.size / 1024 / 1024)}MB)`)\n      }\n      \n      const fileStream = createReadStream(csvFile, { \n        encoding: 'utf8',\n        highWaterMark: 64 * 1024 // 64KB chunks\n      })\n      const rl = createInterface({\n        input: fileStream,\n        crlfDelay: Infinity\n      })\n\n      let lineNumber = 0\n      let fileRecordCount = 0\n\n      for await (const line of rl) {\n        lineNumber++\n        \n        // Skip header line\n        if (lineNumber === 1) {\n          continue\n        }\n\n        if (line.trim()) {\n          if (!config.skipValidation) {\n            const parseResult = parseCSVLineEnhanced(line, lineNumber)\n            parseErrors.push(...parseResult.errors)\n            parseWarnings.push(...parseResult.warnings)\n            \n            if (parseResult.record) {\n              allRecords.push(parseResult.record)\n              recordsProcessed++\n              fileRecordCount++\n            } else {\n              recordsSkipped++\n            }\n          } else {\n            // Fast parsing without validation for large files\n            const record = parseCSVLine(line)\n            if (record) {\n              allRecords.push(record)\n              recordsProcessed++\n              fileRecordCount++\n            } else {\n              recordsSkipped++\n            }\n          }\n\n          // Memory safety check\n          if (allRecords.length >= maxRecordsInMemory) {\n            warnings.push(`Memory limit reached. Processed ${recordsProcessed} records, truncating remaining data.`)\n            break\n          }\n        }\n      }\n\n      rl.close()\n      fileStream.destroy()\n      \n      if (fileRecordCount === 0) {\n        warnings.push(`No valid records found in ${csvFile}`)\n      }\n      \n    } catch (error) {\n      const message = `Could not process CSV file ${csvFile}: ${error}`\n      warnings.push(message)\n      console.warn(message)\n    }\n  }\n\n  if (allRecords.length === 0) {\n    throw new Error('No valid data found in CSV files. Check file format and data validity.')\n  }\n\n  // Report parsing issues\n  if (parseErrors.length > 0) {\n    warnings.push(`${parseErrors.length} parsing errors encountered`)\n    if (parseErrors.length > 10) {\n      console.error('First 10 parsing errors:', parseErrors.slice(0, 10))\n    } else {\n      console.error('Parsing errors:', parseErrors)\n    }\n  }\n\n  if (parseWarnings.length > 0 && !config.skipValidation) {\n    warnings.push(`${parseWarnings.length} parsing warnings`)\n    console.warn(`${parseWarnings.length} parsing warnings (run with skipDataValidation: true to suppress)`)\n  }\n\n  // Calculate test duration and time series data\n  const startTime = Math.min(...allRecords.map(r => r.timestamp))\n  const endTime = Math.max(...allRecords.map(r => r.timestamp))\n  const testDuration = (endTime - startTime) / 1000 // in seconds\n\n  // Group data by endpoint\n  const endpointData = new Map<string, JMeterRecord[]>()\n  allRecords.forEach(record => {\n    if (!endpointData.has(record.label)) {\n      endpointData.set(record.label, [])\n    }\n    endpointData.get(record.label)!.push(record)\n  })\n\n  // Calculate statistics for each endpoint\n  const endpointStats: EndpointStats[] = []\n  const apdexData: ApdexData[] = []\n  \n  for (const [label, records] of endpointData) {\n    const responseTimes = records.map(r => r.elapsed)\n    const errors = records.filter(r => !r.success).length\n    const totalBytes = records.reduce((sum, r) => sum + r.bytes, 0)\n    const average = responseTimes.reduce((a, b) => a + b, 0) / responseTimes.length\n    \n    const stats: EndpointStats = {\n      label,\n      samples: records.length,\n      average,\n      median: StatisticsCalculator.calculatePercentile(responseTimes, 50),\n      p90: StatisticsCalculator.calculatePercentile(responseTimes, 90),\n      p95: StatisticsCalculator.calculatePercentile(responseTimes, 95),\n      p99: StatisticsCalculator.calculatePercentile(responseTimes, 99),\n      min: Math.min(...responseTimes),\n      max: Math.max(...responseTimes),\n      errorRate: errors / records.length,\n      throughput: records.length / Math.max(testDuration, 1),\n      receivedKB: totalBytes / 1024,\n      avgBytes: totalBytes / records.length\n    }\n\n    if (options.includeApdex !== false) {\n      const apdex = StatisticsCalculator.calculateApdexScore(\n        responseTimes,\n        options.apdexThreshold || 500,\n        label\n      )\n      stats.apdexScore = apdex.score\n      apdexData.push(apdex)\n    }\n\n    endpointStats.push(stats)\n  }\n\n  // Calculate time series data for charts\n  const timeInterval = Math.max(Math.floor(testDuration / 100), 1) * 1000 // milliseconds\n  const timeSeriesData: TimeSeriesPoint[] = []\n  \n  for (let t = startTime; t <= endTime; t += timeInterval) {\n    const windowRecords = allRecords.filter(r => r.timestamp >= t && r.timestamp < t + timeInterval)\n    if (windowRecords.length > 0) {\n      const avgResponseTime = windowRecords.reduce((sum, r) => sum + r.elapsed, 0) / windowRecords.length\n      const errors = windowRecords.filter(r => !r.success).length\n      const activeThreads = Math.max(...windowRecords.map(r => r.allThreads))\n      \n      timeSeriesData.push({\n        timestamp: t,\n        responseTime: avgResponseTime,\n        throughput: windowRecords.length / (timeInterval / 1000),\n        errorRate: errors / windowRecords.length,\n        activeThreads\n      })\n    }\n  }\n\n  // Calculate error summary\n  const errorCounts = new Map<number, number>()\n  allRecords.filter(r => !r.success).forEach(r => {\n    errorCounts.set(r.responseCode, (errorCounts.get(r.responseCode) || 0) + 1)\n  })\n\n  const errorSummary: ErrorInfo[] = Array.from(errorCounts.entries())\n    .map(([code, count]) => ({\n      responseCode: code,\n      count,\n      percentage: (count / allRecords.length) * 100,\n      message: getErrorMessage(code)\n    }))\n    .sort((a, b) => b.count - a.count)\n\n  // Calculate overall summary\n  const totalRequests = allRecords.length\n  const errorCount = allRecords.filter(r => !r.success).length\n  const allResponseTimes = allRecords.map(r => r.elapsed)\n  const averageResponseTime = allResponseTimes.reduce((sum, r) => sum + r, 0) / totalRequests\n  const errorRate = errorCount / totalRequests\n  const throughput = totalRequests / Math.max(testDuration, 1)\n\n  const summary: ReportResult['summary'] = {\n    totalRequests,\n    averageResponseTime,\n    errorRate,\n    throughput\n  }\n\n  if (options.includePercentiles !== false) {\n    summary.percentiles = {\n      p50: StatisticsCalculator.calculatePercentile(allResponseTimes, 50),\n      p90: StatisticsCalculator.calculatePercentile(allResponseTimes, 90),\n      p95: StatisticsCalculator.calculatePercentile(allResponseTimes, 95),\n      p99: StatisticsCalculator.calculatePercentile(allResponseTimes, 99)\n    }\n  }\n\n  if (options.includeApdex !== false) {\n    const overallApdex = StatisticsCalculator.calculateApdexScore(\n      allResponseTimes,\n      options.apdexThreshold || 500\n    )\n    summary.apdexScore = overallApdex.score\n  }\n\n  // Generate the HTML report\n  const htmlContent = generateEnhancedHTMLReport({\n    title: options.title || 'JMeter Performance Dashboard',\n    theme: options.theme || 'light',\n    summary,\n    endpointStats,\n    timeSeriesData,\n    errorSummary,\n    apdexData,\n    testDuration,\n    allRecords,\n    endpointData,\n    includeDrillDown: options.includeDrillDown !== false,\n    jenkinsCompatible: options.jenkinsCompatible,\n    embeddedCharts: options.embeddedCharts\n  })\n\n  const reportPath = path.join(outputDir, 'index.html')\n  await fsPromises.writeFile(reportPath, htmlContent, 'utf8')\n\n  const processingEndTime = performance.now()\n  const memoryUsage = process.memoryUsage()\n\n  return {\n    outputPath: outputDir,\n    reportUrl: `file://${path.resolve(reportPath)}`,\n    summary,\n    warnings,\n    stats: {\n      memoryUsedMB: Math.round(memoryUsage.heapUsed / 1024 / 1024),\n      processingTimeMs: Math.round(processingEndTime - processingStartTime),\n      recordsProcessed,\n      recordsSkipped\n    }\n  }\n}\n\ninterface HTMLReportData {\n  title: string\n  theme: string\n  summary: ReportResult['summary']\n  endpointStats: EndpointStats[]\n  timeSeriesData: TimeSeriesPoint[]\n  errorSummary: ErrorInfo[]\n  apdexData: ApdexData[]\n  testDuration: number\n  allRecords: JMeterRecord[]\n  endpointData: Map<string, JMeterRecord[]>\n  includeDrillDown: boolean\n  jenkinsCompatible?: boolean\n  embeddedCharts?: boolean\n}\n\n/**\n * Get the appropriate charting library based on Jenkins compatibility\n */\nfunction getEmbeddedChartingLibrary(): string {\n  // Use Chart.js CDN as proven to work in Jenkins by user's implementation\n  return `<script src=\"https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js\"></script>`;\n}\n\n/**\n * Generate enhanced HTML report with Chart.js\n */\nfunction generateEnhancedHTMLReport(data: HTMLReportData): string {\n  const isDark = data.theme === 'dark'\n  const bgColor = isDark ? '#1a1a1a' : '#f8f9fa'\n  const cardBg = isDark ? '#2d3748' : '#ffffff'\n  const textColor = isDark ? '#e2e8f0' : '#2d3748'\n  const borderColor = isDark ? '#4a5568' : '#e2e8f0'\n  const headerBg = isDark ? '#374151' : '#f7fafc'\n\n  // Convert Map to serializable object for JavaScript\n  const endpointDataForJs: Record<string, JMeterRecord[]> = {}\n  data.endpointData.forEach((records, label) => {\n    endpointDataForJs[label] = records\n  })\n\n  const useEmbeddedCharts = data.jenkinsCompatible || data.embeddedCharts\n\n  return `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>${escapeHtml(data.title)}</title>\n    ${useEmbeddedCharts ? getEmbeddedChartingLibrary() : '<script src=\"https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js\"></script>'}\n    <style>\n        * { box-sizing: border-box; margin: 0; padding: 0; }\n        \n        body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n            background-color: ${bgColor};\n            color: ${textColor};\n            line-height: 1.6;\n            font-size: 14px;\n        }\n        \n        .container {\n            max-width: 1400px;\n            margin: 0 auto;\n            padding: 20px;\n        }\n        \n        .header {\n            text-align: center;\n            margin-bottom: 30px;\n            padding: 20px;\n            background: ${cardBg};\n            border: 1px solid ${borderColor};\n            border-radius: 8px;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n        }\n        \n        .header h1 {\n            font-size: 2.5rem;\n            margin-bottom: 10px;\n            font-weight: 600;\n            color: ${isDark ? '#fff' : '#1a202c'};\n        }\n        \n        .header p {\n            font-size: 1.1rem;\n            opacity: 0.8;\n        }\n        \n        .summary-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n            gap: 20px;\n            margin-bottom: 30px;\n        }\n        \n        .summary-card {\n            background: ${cardBg};\n            padding: 20px;\n            border: 1px solid ${borderColor};\n            border-radius: 8px;\n            text-align: center;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n            transition: transform 0.2s;\n        }\n        \n        .summary-card:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 4px 8px rgba(0,0,0,0.15);\n        }\n        \n        .summary-value {\n            font-size: 2.5rem;\n            font-weight: bold;\n            margin-bottom: 8px;\n        }\n        \n        .summary-label {\n            font-size: 0.95rem;\n            opacity: 0.8;\n            text-transform: uppercase;\n            letter-spacing: 0.5px;\n        }\n        \n        .success { color: #10b981; }\n        .warning { color: #f59e0b; }\n        .error { color: #ef4444; }\n        .info { color: #3b82f6; }\n        \n        .panel {\n            background: ${cardBg};\n            border: 1px solid ${borderColor};\n            border-radius: 8px;\n            margin-bottom: 20px;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n        }\n        \n        .panel-heading {\n            padding: 15px 20px;\n            border-bottom: 1px solid ${borderColor};\n            background: ${headerBg};\n            border-radius: 8px 8px 0 0;\n        }\n        \n        .panel-title {\n            font-size: 18px;\n            font-weight: 600;\n            margin: 0;\n            color: ${isDark ? '#fff' : '#1a202c'};\n        }\n        \n        .panel-body {\n            padding: 20px;\n        }\n        \n        .chart-container {\n            position: relative;\n            height: 400px;\n            margin-bottom: 20px;\n        }\n        \n        .table-responsive {\n            overflow-x: auto;\n        }\n        \n        table {\n            width: 100%;\n            border-collapse: collapse;\n            font-size: 13px;\n        }\n        \n        th, td {\n            text-align: left;\n            padding: 12px;\n            border-bottom: 1px solid ${borderColor};\n        }\n        \n        th {\n            background: ${headerBg};\n            font-weight: 600;\n            position: sticky;\n            top: 0;\n            z-index: 10;\n        }\n        \n        tbody tr:hover {\n            background: ${isDark ? '#374151' : '#f9fafb'};\n        }\n        \n        .text-right { text-align: right; }\n        .text-center { text-align: center; }\n        \n        .apdex-score {\n            display: inline-block;\n            padding: 2px 8px;\n            border-radius: 4px;\n            font-weight: 600;\n            font-size: 12px;\n        }\n        \n        .apdex-excellent { background: #10b981; color: white; }\n        .apdex-good { background: #3b82f6; color: white; }\n        .apdex-fair { background: #f59e0b; color: white; }\n        .apdex-poor { background: #ef4444; color: white; }\n        \n        .tabs {\n            display: flex;\n            border-bottom: 2px solid ${borderColor};\n            margin-bottom: 20px;\n        }\n        \n        .tab {\n            padding: 10px 20px;\n            cursor: pointer;\n            background: none;\n            border: none;\n            font-size: 16px;\n            color: ${textColor};\n            opacity: 0.7;\n            transition: all 0.2s;\n        }\n        \n        .tab:hover {\n            opacity: 1;\n        }\n        \n        .tab.active {\n            opacity: 1;\n            border-bottom: 3px solid #3b82f6;\n            margin-bottom: -2px;\n        }\n        \n        .tab-content {\n            display: none;\n        }\n        \n        .tab-content.active {\n            display: block;\n        }\n        \n        .drill-down-link {\n            color: #3b82f6;\n            cursor: pointer;\n            text-decoration: none;\n        }\n        \n        .drill-down-link:hover {\n            text-decoration: underline;\n        }\n        \n        .modal {\n            display: none;\n            position: fixed;\n            z-index: 1000;\n            left: 0;\n            top: 0;\n            width: 100%;\n            height: 100%;\n            background-color: rgba(0,0,0,0.5);\n        }\n        \n        .modal-content {\n            background-color: ${cardBg};\n            margin: 5% auto;\n            padding: 20px;\n            border: 1px solid ${borderColor};\n            border-radius: 8px;\n            width: 90%;\n            max-width: 1200px;\n            max-height: 80vh;\n            overflow-y: auto;\n        }\n        \n        .close {\n            color: ${textColor};\n            float: right;\n            font-size: 28px;\n            font-weight: bold;\n            cursor: pointer;\n        }\n        \n        .close:hover {\n            opacity: 0.7;\n        }\n        \n        @media (max-width: 768px) {\n            .summary-grid {\n                grid-template-columns: 1fr;\n            }\n            \n            .header h1 {\n                font-size: 1.8rem;\n            }\n            \n            .tab {\n                font-size: 14px;\n                padding: 8px 12px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <h1>${escapeHtml(data.title)}</h1>\n            <p>Test Duration: ${(data.testDuration / 60).toFixed(2)} minutes | Generated: ${new Date().toLocaleString()}</p>\n        </div>\n        \n        <div class=\"summary-grid\">\n            <div class=\"summary-card\">\n                <div class=\"summary-value\">${data.summary.totalRequests.toLocaleString()}</div>\n                <div class=\"summary-label\">Total Requests</div>\n            </div>\n            <div class=\"summary-card\">\n                <div class=\"summary-value ${data.summary.errorRate < 0.01 ? 'success' : data.summary.errorRate < 0.05 ? 'warning' : 'error'}\">\n                    ${(data.summary.errorRate * 100).toFixed(2)}%\n                </div>\n                <div class=\"summary-label\">Error Rate</div>\n            </div>\n            <div class=\"summary-card\">\n                <div class=\"summary-value info\">${data.summary.averageResponseTime?.toFixed(0)}ms</div>\n                <div class=\"summary-label\">Average Response Time</div>\n            </div>\n            <div class=\"summary-card\">\n                <div class=\"summary-value\">${data.summary.throughput.toFixed(2)}/s</div>\n                <div class=\"summary-label\">Throughput</div>\n            </div>\n            ${data.summary.apdexScore !== undefined ? `\n            <div class=\"summary-card\">\n                <div class=\"summary-value ${getApdexClass(data.summary.apdexScore)}\">${data.summary.apdexScore.toFixed(3)}</div>\n                <div class=\"summary-label\">APDEX Score</div>\n            </div>\n            ` : ''}\n            ${data.summary.percentiles ? `\n            <div class=\"summary-card\">\n                <div class=\"summary-value\">${data.summary.percentiles.p95.toFixed(0)}ms</div>\n                <div class=\"summary-label\">95th Percentile</div>\n            </div>\n            ` : ''}\n        </div>\n        \n        <div class=\"tabs\">\n            <button class=\"tab active\" onclick=\"showTab('charts')\">Charts</button>\n            <button class=\"tab\" onclick=\"showTab('statistics')\">Statistics</button>\n            <button class=\"tab\" onclick=\"showTab('errors')\">Errors</button>\n            ${data.apdexData.length > 0 ? '<button class=\"tab\" onclick=\"showTab(\\'apdex\\')\">APDEX</button>' : ''}\n        </div>\n        \n        <div id=\"charts\" class=\"tab-content active\">\n            <div class=\"panel\">\n                <div class=\"panel-heading\">\n                    <h3 class=\"panel-title\">Response Times Over Time</h3>\n                </div>\n                <div class=\"panel-body\">\n                    <div class=\"chart-container\">\n                        <canvas id=\"responseTimeChart\"></canvas>\n                    </div>\n                </div>\n            </div>\n            \n            <div class=\"panel\">\n                <div class=\"panel-heading\">\n                    <h3 class=\"panel-title\">Throughput & Error Rate</h3>\n                </div>\n                <div class=\"panel-body\">\n                    <div class=\"chart-container\">\n                        <canvas id=\"throughputChart\"></canvas>\n                    </div>\n                </div>\n            </div>\n            \n            <div class=\"panel\">\n                <div class=\"panel-heading\">\n                    <h3 class=\"panel-title\">Response Time Distribution</h3>\n                </div>\n                <div class=\"panel-body\">\n                    <div class=\"chart-container\">\n                        <canvas id=\"distributionChart\"></canvas>\n                    </div>\n                </div>\n            </div>\n        </div>\n        \n        <div id=\"statistics\" class=\"tab-content\">\n            <div class=\"panel\">\n                <div class=\"panel-heading\">\n                    <h3 class=\"panel-title\">Endpoint Statistics</h3>\n                </div>\n                <div class=\"panel-body\">\n                    <div class=\"table-responsive\">\n                        <table>\n                            <thead>\n                                <tr>\n                                    <th>Endpoint</th>\n                                    <th class=\"text-right\">Samples</th>\n                                    <th class=\"text-right\">Average</th>\n                                    <th class=\"text-right\">Median</th>\n                                    <th class=\"text-right\">90%</th>\n                                    <th class=\"text-right\">95%</th>\n                                    <th class=\"text-right\">99%</th>\n                                    <th class=\"text-right\">Min</th>\n                                    <th class=\"text-right\">Max</th>\n                                    <th class=\"text-right\">Error %</th>\n                                    <th class=\"text-right\">Throughput</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                ${data.endpointStats.map(stat => `\n                                <tr>\n                                    <td>${data.includeDrillDown ? `<a class=\"drill-down-link\" onclick=\"showDrillDown('${escapeJavaScript(stat.label)}')\">${escapeHtml(stat.label)}</a>` : escapeHtml(stat.label)}</td>\n                                    <td class=\"text-right\">${stat.samples.toLocaleString()}</td>\n                                    <td class=\"text-right\">${stat.average.toFixed(0)}ms</td>\n                                    <td class=\"text-right\">${stat.median.toFixed(0)}ms</td>\n                                    <td class=\"text-right\">${stat.p90.toFixed(0)}ms</td>\n                                    <td class=\"text-right\">${stat.p95.toFixed(0)}ms</td>\n                                    <td class=\"text-right\">${stat.p99.toFixed(0)}ms</td>\n                                    <td class=\"text-right\">${stat.min.toFixed(0)}ms</td>\n                                    <td class=\"text-right\">${stat.max.toFixed(0)}ms</td>\n                                    <td class=\"text-right ${stat.errorRate < 0.01 ? 'success' : stat.errorRate < 0.05 ? 'warning' : 'error'}\">\n                                        ${(stat.errorRate * 100).toFixed(2)}%\n                                    </td>\n                                    <td class=\"text-right\">${stat.throughput.toFixed(2)}/s</td>\n                                </tr>\n                                `).join('')}\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            </div>\n        </div>\n        \n        <div id=\"errors\" class=\"tab-content\">\n            <div class=\"panel\">\n                <div class=\"panel-heading\">\n                    <h3 class=\"panel-title\">Error Summary</h3>\n                </div>\n                <div class=\"panel-body\">\n                    ${data.errorSummary.length > 0 ? `\n                    <div class=\"table-responsive\">\n                        <table>\n                            <thead>\n                                <tr>\n                                    <th>Response Code</th>\n                                    <th>Error Message</th>\n                                    <th class=\"text-right\">Count</th>\n                                    <th class=\"text-right\">Percentage</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                ${data.errorSummary.map(error => `\n                                <tr>\n                                    <td><span class=\"error\">${error.responseCode}</span></td>\n                                    <td>${escapeHtml(error.message)}</td>\n                                    <td class=\"text-right\">${error.count.toLocaleString()}</td>\n                                    <td class=\"text-right\">${error.percentage.toFixed(2)}%</td>\n                                </tr>\n                                `).join('')}\n                            </tbody>\n                        </table>\n                    </div>\n                    ` : '<p>No errors recorded during the test.</p>'}\n                </div>\n            </div>\n        </div>\n        \n        ${data.apdexData.length > 0 ? `\n        <div id=\"apdex\" class=\"tab-content\">\n            <div class=\"panel\">\n                <div class=\"panel-heading\">\n                    <h3 class=\"panel-title\">APDEX Scores by Endpoint</h3>\n                </div>\n                <div class=\"panel-body\">\n                    <div class=\"table-responsive\">\n                        <table>\n                            <thead>\n                                <tr>\n                                    <th>Endpoint</th>\n                                    <th class=\"text-center\">APDEX Score</th>\n                                    <th class=\"text-right\">Satisfied</th>\n                                    <th class=\"text-right\">Tolerating</th>\n                                    <th class=\"text-right\">Frustrated</th>\n                                    <th class=\"text-right\">Total Samples</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                ${data.apdexData.map(apdex => `\n                                <tr>\n                                    <td>${escapeHtml(apdex.label)}</td>\n                                    <td class=\"text-center\">\n                                        <span class=\"apdex-score ${getApdexClass(apdex.score)}\">\n                                            ${apdex.score.toFixed(3)}\n                                        </span>\n                                    </td>\n                                    <td class=\"text-right\">${apdex.satisfied.toLocaleString()}</td>\n                                    <td class=\"text-right\">${apdex.tolerating.toLocaleString()}</td>\n                                    <td class=\"text-right\">${apdex.frustrated.toLocaleString()}</td>\n                                    <td class=\"text-right\">${apdex.samples.toLocaleString()}</td>\n                                </tr>\n                                `).join('')}\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            </div>\n        </div>\n        ` : ''}\n    </div>\n    \n    ${data.includeDrillDown ? `\n    <div id=\"drillDownModal\" class=\"modal\">\n        <div class=\"modal-content\">\n            <span class=\"close\" onclick=\"closeDrillDown()\">&times;</span>\n            <h2 id=\"drillDownTitle\"></h2>\n            <div id=\"drillDownContent\"></div>\n        </div>\n    </div>\n    ` : ''}\n    \n    <script>\n        const isDark = ${isDark};\n        const chartColors = {\n            primary: '#3b82f6',\n            success: '#10b981',\n            warning: '#f59e0b',\n            error: '#ef4444',\n            info: '#6366f1',\n            gray: isDark ? '#6b7280' : '#9ca3af'\n        };\n        \n        const gridColor = isDark ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)';\n        const textColor = isDark ? '#e5e7eb' : '#374151';\n        \n        // Time series data\n        const timeSeriesData = ${safeJsonStringify(data.timeSeriesData)};\n        const labels = timeSeriesData.map(d => new Date(d.timestamp).toLocaleTimeString());\n        \n        // Response Time Chart\n        const responseTimeCtx = document.getElementById('responseTimeChart').getContext('2d');\n        new Chart(responseTimeCtx, {\n            type: 'line',\n            data: {\n                labels: labels,\n                datasets: [{\n                    label: 'Average Response Time',\n                    data: timeSeriesData.map(d => d.responseTime),\n                    borderColor: chartColors.primary,\n                    backgroundColor: chartColors.primary + '20',\n                    tension: 0.1,\n                    pointRadius: 0,\n                    pointHoverRadius: 4\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        display: true,\n                        labels: { color: textColor }\n                    },\n                    tooltip: {\n                        callbacks: {\n                            label: (context) => context.parsed.y.toFixed(0) + 'ms'\n                        }\n                    }\n                },\n                scales: {\n                    x: {\n                        grid: { color: gridColor },\n                        ticks: { color: textColor }\n                    },\n                    y: {\n                        grid: { color: gridColor },\n                        ticks: { \n                            color: textColor,\n                            callback: (value) => value + 'ms'\n                        }\n                    }\n                }\n            }\n        });\n        \n        // Throughput & Error Rate Chart\n        const throughputCtx = document.getElementById('throughputChart').getContext('2d');\n        new Chart(throughputCtx, {\n            type: 'line',\n            data: {\n                labels: labels,\n                datasets: [{\n                    label: 'Throughput',\n                    data: timeSeriesData.map(d => d.throughput),\n                    borderColor: chartColors.success,\n                    backgroundColor: chartColors.success + '20',\n                    tension: 0.1,\n                    pointRadius: 0,\n                    yAxisID: 'y'\n                }, {\n                    label: 'Error Rate',\n                    data: timeSeriesData.map(d => d.errorRate * 100),\n                    borderColor: chartColors.error,\n                    backgroundColor: chartColors.error + '20',\n                    tension: 0.1,\n                    pointRadius: 0,\n                    yAxisID: 'y1'\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        display: true,\n                        labels: { color: textColor }\n                    }\n                },\n                scales: {\n                    x: {\n                        grid: { color: gridColor },\n                        ticks: { color: textColor }\n                    },\n                    y: {\n                        type: 'linear',\n                        display: true,\n                        position: 'left',\n                        grid: { color: gridColor },\n                        ticks: { \n                            color: textColor,\n                            callback: (value) => value + '/s'\n                        }\n                    },\n                    y1: {\n                        type: 'linear',\n                        display: true,\n                        position: 'right',\n                        grid: { drawOnChartArea: false },\n                        ticks: { \n                            color: textColor,\n                            callback: (value) => value + '%'\n                        }\n                    }\n                }\n            }\n        });\n        \n        // Response Time Distribution\n        const allResponseTimes = ${safeJsonStringify(data.allRecords.map(r => r.elapsed))};\n        const distributionCtx = document.getElementById('distributionChart').getContext('2d');\n        \n        // Create histogram data\n        const bins = 50;\n        const minTime = Math.min(...allResponseTimes);\n        const maxTime = Math.max(...allResponseTimes);\n        const binSize = (maxTime - minTime) / bins;\n        const histogram = new Array(bins).fill(0);\n        \n        allResponseTimes.forEach(time => {\n            const binIndex = Math.min(Math.floor((time - minTime) / binSize), bins - 1);\n            histogram[binIndex]++;\n        });\n        \n        const binLabels = histogram.map((_, i) => Math.round(minTime + i * binSize) + 'ms');\n        \n        new Chart(distributionCtx, {\n            type: 'bar',\n            data: {\n                labels: binLabels,\n                datasets: [{\n                    label: 'Request Count',\n                    data: histogram,\n                    backgroundColor: chartColors.info + '80',\n                    borderColor: chartColors.info,\n                    borderWidth: 1\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        display: false\n                    }\n                },\n                scales: {\n                    x: {\n                        grid: { display: false },\n                        ticks: { \n                            color: textColor,\n                            maxRotation: 45,\n                            minRotation: 45\n                        }\n                    },\n                    y: {\n                        grid: { color: gridColor },\n                        ticks: { color: textColor }\n                    }\n                }\n            }\n        });\n        \n        // Tab functionality\n        function showTab(tabName) {\n            document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));\n            document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));\n            \n            event.target.classList.add('active');\n            document.getElementById(tabName).classList.add('active');\n        }\n        \n        // APDEX class helper\n        function getApdexClass(score) {\n            if (score >= 0.94) return 'apdex-excellent';\n            if (score >= 0.85) return 'apdex-good';\n            if (score >= 0.70) return 'apdex-fair';\n            return 'apdex-poor';\n        }\n        \n        ${data.includeDrillDown ? `\n        // Drill-down functionality\n        const endpointData = ${safeJsonStringify(endpointDataForJs)};\n        \n        function showDrillDown(endpoint) {\n            const modal = document.getElementById('drillDownModal');\n            const title = document.getElementById('drillDownTitle');\n            const content = document.getElementById('drillDownContent');\n            \n            title.textContent = 'Details: ' + endpoint;\n            \n            const records = endpointData[endpoint] || [];\n            const responseTimes = records.map(r => r.elapsed);\n            \n            // Create drill-down chart\n            content.innerHTML = \\`\n                <div class=\"panel\">\n                    <div class=\"panel-heading\">\n                        <h3 class=\"panel-title\">Response Time Timeline</h3>\n                    </div>\n                    <div class=\"panel-body\">\n                        <div class=\"chart-container\">\n                            <canvas id=\"drillDownChart\"></canvas>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"panel\">\n                    <div class=\"panel-heading\">\n                        <h3 class=\"panel-title\">Sample Details (Last 100)</h3>\n                    </div>\n                    <div class=\"panel-body\">\n                        <div class=\"table-responsive\">\n                            <table>\n                                <thead>\n                                    <tr>\n                                        <th>Timestamp</th>\n                                        <th>Response Time</th>\n                                        <th>Status</th>\n                                        <th>Bytes</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    \\${records.slice(-100).reverse().map(r => \\`\n                                    <tr>\n                                        <td>\\${new Date(r.timestamp).toLocaleString()}</td>\n                                        <td class=\"text-right\">\\${r.elapsed}ms</td>\n                                        <td class=\"text-center\">\n                                            <span class=\"\\${r.success ? 'success' : 'error'}\">\\${r.responseCode}</span>\n                                        </td>\n                                        <td class=\"text-right\">\\${(r.bytes / 1024).toFixed(2)} KB</td>\n                                    </tr>\n                                    \\`).join('')}\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                </div>\n            \\`;\n            \n            modal.style.display = 'block';\n            \n            // Create drill-down chart\n            setTimeout(() => {\n                const drillCtx = document.getElementById('drillDownChart').getContext('2d');\n                new Chart(drillCtx, {\n                    type: 'line',\n                    data: {\n                        labels: records.map(r => new Date(r.timestamp).toLocaleTimeString()),\n                        datasets: [{\n                            label: 'Response Time',\n                            data: responseTimes,\n                            borderColor: chartColors.primary,\n                            backgroundColor: chartColors.primary + '20',\n                            tension: 0.1,\n                            pointRadius: 1,\n                            pointHoverRadius: 4\n                        }]\n                    },\n                    options: {\n                        responsive: true,\n                        maintainAspectRatio: false,\n                        plugins: {\n                            legend: { display: false }\n                        },\n                        scales: {\n                            x: {\n                                grid: { color: gridColor },\n                                ticks: { \n                                    color: textColor,\n                                    maxTicksLimit: 10\n                                }\n                            },\n                            y: {\n                                grid: { color: gridColor },\n                                ticks: { \n                                    color: textColor,\n                                    callback: (value) => value + 'ms'\n                                }\n                            }\n                        }\n                    }\n                });\n            }, 100);\n        }\n        \n        function closeDrillDown() {\n            document.getElementById('drillDownModal').style.display = 'none';\n        }\n        \n        window.onclick = function(event) {\n            const modal = document.getElementById('drillDownModal');\n            if (event.target == modal) {\n                modal.style.display = 'none';\n            }\n        }\n        ` : ''}\n    </script>\n</body>\n</html>`;\n\n  function getApdexClass(score: number): string {\n    if (score >= 0.94) return 'success';\n    if (score >= 0.85) return 'info';\n    if (score >= 0.70) return 'warning';\n    return 'error';\n  }\n}\n\n/**\n * Express middleware for performance monitoring\n */\nexport interface MiddlewareOptions {\n  includeQuery?: boolean\n  skipPaths?: RegExp[]\n  customLabels?: (req: any) => Record<string, any>\n  collector?: JMeterPerformanceCollector\n}\n\nexport function performanceMiddleware(\n  collectorOrOptions: JMeterPerformanceCollector | MiddlewareOptions,\n  options?: MiddlewareOptions\n) {\n  let collector: JMeterPerformanceCollector\n  let middlewareOptions: MiddlewareOptions\n\n  if (collectorOrOptions instanceof JMeterPerformanceCollector) {\n    collector = collectorOrOptions\n    middlewareOptions = options || {}\n  } else {\n    middlewareOptions = collectorOrOptions\n    collector = middlewareOptions.collector!\n  }\n\n  return (req: any, res: any, next: any) => {\n    // Skip if path matches skip patterns\n    if (middlewareOptions.skipPaths) {\n      const shouldSkip = middlewareOptions.skipPaths.some(pattern => \n        pattern.test(req.path)\n      )\n      if (shouldSkip) {\n        return next()\n      }\n    }\n\n    const startTime = Date.now()\n    const startCpuUsage = process.cpuUsage()\n    \n    // Override res.end to capture response\n    const originalEnd = res.end\n    res.end = function(...args: any[]) {\n      res.end = originalEnd\n      res.end(...args)\n      \n      const responseTime = Date.now() - startTime\n      const cpuUsage = process.cpuUsage(startCpuUsage)\n      \n      // Build endpoint label\n      let endpoint = `${req.method} ${req.route?.path || req.path}`\n      if (middlewareOptions.includeQuery && req.query && Object.keys(req.query).length > 0) {\n        endpoint += '?' + new URLSearchParams(req.query).toString()\n      }\n      \n      // Get custom labels if provided\n      const customFields = middlewareOptions.customLabels ? \n        middlewareOptions.customLabels(req) : {}\n      \n      // Record metric\n      collector.recordMetric({\n        endpoint,\n        responseTime,\n        statusCode: res.statusCode,\n        method: req.method,\n        success: res.statusCode < 400,\n        bytes: res.get('content-length') ? parseInt(res.get('content-length')) : 0,\n        sentBytes: req.get('content-length') ? parseInt(req.get('content-length')) : 0,\n        customFields: {\n          ...customFields,\n          cpuUser: cpuUsage.user,\n          cpuSystem: cpuUsage.system,\n          memoryUsage: process.memoryUsage().heapUsed\n        }\n      }).catch(err => console.error('Failed to record metric:', err))\n    }\n    \n    next()\n  }\n}\n\n// Export all functions and classes\nexport default {\n  createCollector,\n  generateJMeterReport,\n  performanceMiddleware,\n  JMeterPerformanceCollector,\n  StatisticsCalculator\n}"]}